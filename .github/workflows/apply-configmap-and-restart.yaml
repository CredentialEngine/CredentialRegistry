# syntax=docker/dockerfile:1.4
name: Apply configmap and restart

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (staging or sandbox)"
        type: choice
        required: true
        default: staging
        options:
          - staging
          - sandbox

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER: ce-registry-eks

jobs:
  apply-and-restart:
    if: ${{ github.repository_owner == 'CredentialEngine' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/github-oidc-widget
          aws-region: ${{ env.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.29.6

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name "${{ env.EKS_CLUSTER }}" --region "${{ env.AWS_REGION }}"

      - name: Apply ConfigMap
        working-directory: terraform/environments/eks
        run: |
          ENV="${{ inputs.environment }}"
          case "$ENV" in
            staging) NS="credreg-staging" ;;
            sandbox) NS="credreg-sandbox" ;;
            *) echo "Unknown environment: $ENV" >&2; exit 1 ;;
          esac
          ENV_DIR="k8s-manifests-${ENV}"
          echo "Applying ConfigMap from $ENV_DIR to namespace $NS"
          kubectl -n "$NS" apply -f "$ENV_DIR/app-configmap.yaml"

      - name: Restart Deployments
        run: |
          ENV="${{ inputs.environment }}"
          case "$ENV" in
            staging) NS="credreg-staging" ;;
            sandbox) NS="credreg-sandbox" ;;
            *) echo "Unknown environment: $ENV" >&2; exit 1 ;;
          esac
          kubectl -n "$NS" rollout restart deploy/worker-app
          kubectl -n "$NS" rollout restart deploy/main-app
          kubectl -n "$NS" rollout status deploy/worker-app --timeout=5m
          kubectl -n "$NS" rollout status deploy/main-app --timeout=5m

      - name: Notify Slack (configmap apply)
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          REPO: ${{ github.repository }}
          RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          if [ -z "${SLACK_WEBHOOK_URL}" ]; then
            echo "SLACK_WEBHOOK_URL not set; skipping notification";
            exit 0;
          fi
          STATUS="${{ job.status }}"; EMOJI=✅; [ "$STATUS" = "failure" ] && EMOJI=❌
          MSG="$EMOJI ConfigMap apply ${STATUS} for ${REPO} (env: ${ENVIRONMENT}). ${RUN_URL}"
          payload=$(jq -nc --arg text "$MSG" '{text:$text}')
          curl -sS -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL" || true
