name: Run linter and tests

on:
  push:
    branches:
      - master
      - simplecov
      - semgrep_fixes
      - hardening-dockerfile-sq
  pull_request:

permissions:
  contents: read
  security-events: write

env:
  GIT_AUTHOR_NAME: ${{ vars.GIT_AUTHOR_NAME }}
  GIT_AUTHOR_EMAIL: ${{ vars.GIT_AUTHOR_EMAIL }}

jobs:
  test:
    name: "Lint, test & analyse"
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: metadataregistry_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/metadataregistry_test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pre-cache grape-middleware-logger gem
        run: |
          mkdir -p vendor/cache
          if [ -f local_packages/grape-middleware-logger-2.4.0.gem ]; then
            cp -v local_packages/grape-middleware-logger-2.4.0.gem vendor/cache/
          fi          
          
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - run: RACK_ENV=test bundle exec rake db:migrate
      # Rubocop, bundler-audit, etc. are executed through Overcommit hooks.

      - name: Run Overcommit hooks
        run: |
          bundle exec overcommit --sign
          bundle exec overcommit --run
        continue-on-error: true
      - run: bundle exec rspec

      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@v5.2.0
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage

  semgrep:
    name: "Semgrep SAST"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install Semgrep
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install semgrep
      - name: Run Semgrep (Ruby/JS)
        run: |
          semgrep --config p/r2c-security-audit \
            --include app --include lib \
            --error --timeout 180
      - name: Export Semgrep SARIF
        if: always()
        run: |
          semgrep --config p/r2c-security-audit \
            --include app --include lib \
            --sarif -o semgrep.sarif || true
      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
