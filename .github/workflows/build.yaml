# syntax=docker/dockerfile:1.4
name: Staging build and push

on:
  push:
    branches: ["eks-infrastructure"]
    paths:
      - '*'
      
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: eks-ce-registry
  EKS_CLUSTER: ce-registry-eks
  K8S_NAMESPACE: credreg
  DOCKER_IMAGE_TAG: ${{ github.ref_name }}-${{ github.sha }}  
  AWS_ACCOUNT: 996810415034

concurrency:
  group: staging-cluster-deploy
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.img.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/github-oidc-widget
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (multi-stage)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.ref_name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          secrets: |
            composer_auth=${{ secrets.AUTH_JSON_FILE }}

      - name: Export image URI
        id: img
        run: |
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }}" >> "$GITHUB_OUTPUT"



  # deploy-to-eks:
  #   name: Deploy to EKS (staging)
  #   runs-on: ubuntu-latest
  #   needs: build-and-push

  #   steps:
  #     - name: Checkout (for manifests if ever needed)
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT }}:role/github-oidc-widget
  #         aws-region: ${{ env.AWS_REGION }}

  #     - name: Install kubectl
  #       uses: azure/setup-kubectl@v3
  #       with:
  #         version: v1.29.0

  #     - name: Update kubeconfig
  #       run: |
  #         aws eks update-kubeconfig --name "${{ env.EKS_CLUSTER }}" --region "${{ env.AWS_REGION }}"

  #     - name: Set image on laravel-app deployment
  #       run: |
  #         kubectl set image deployment/laravel-app \
  #           laravel="${{ needs.build-and-push.outputs.image }}" \
  #           -n "${{ env.K8S_NAMESPACE }}"

  #     - name: Set image on laravel-horizon deployment
  #       run: |
  #         kubectl set image deployment/laravel-horizon \
  #           laravel-horizon="${{ needs.build-and-push.outputs.image }}" \
  #           -n "${{ env.K8S_NAMESPACE }}"
  #         kubectl set image deployment/laravel-horizon \
  #           laravel-horizon-web="${{ needs.build-and-push.outputs.image }}" \
  #           -n "${{ env.K8S_NAMESPACE }}"            

  #     - name: Set image on laravel-cron deployment
  #       run: |
  #         kubectl set image deployment/laravel-cron \
  #           laravel-cron="${{ needs.build-and-push.outputs.image }}" \
  #           -n "${{ env.K8S_NAMESPACE }}"

  #     - name: Wait for rollout to finish
  #       run: |
  #         kubectl rollout status deployment/laravel-app -n "${{ env.K8S_NAMESPACE }}" --timeout=300s
  #         kubectl rollout status deployment/laravel-horizon -n "${{ env.K8S_NAMESPACE }}" --timeout=300s
  #         kubectl rollout status deployment/laravel-cron -n "${{ env.K8S_NAMESPACE }}" --timeout=300s
          
  #     - name: Notify Slack about successful staging deployment
  #       if: success()
  #       uses: slackapi/slack-github-action@v1.24.0
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #       with:
  #         payload: |
  #           {
  #             "text": "ðŸš€ Deployment to *staging* succeeded for commit <https://github.com/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}> (<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|run #${{ github.run_number }}>)"
  #           }
