apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: credreg-sandbox
  labels:
    app: redis
spec:
  serviceName: redis-service
  replicas: 1 # For production, use 3 with Redis Sentinel
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      priorityClassName: sandbox-medium
      nodeSelector:
        env: sandbox
      tolerations:
        - key: "env"
          operator: "Equal"
          value: "sandbox"
          effect: "NoSchedule"
      containers:
        - name: redis
          image: redis:7.2-alpine # Official Redis image
          command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /usr/local/etc/redis
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          livenessProbe:
            exec:
              command: ["redis-cli", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            exec:
              command: ["redis-cli", "ping"]
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: "gp2" # AWS EBS gp3 (adjust if needed)
        resources:
          requests:
            storage: 10Gi

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: credreg-sandbox
spec:
  clusterIP: None # Headless service for direct pod access
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    app: redis
