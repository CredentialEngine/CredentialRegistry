
#############################
# Build stage (UBI 10 minimal)
#############################
FROM registry.access.redhat.com/ubi10/ubi-minimal AS builder

ARG PLAT=x86_64
ARG RUBY_VERSION=3.4.3
ENV APP_PATH=/app/
ENV LANGUAGE=en_US:en
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV BUNDLE_PATH=/app/vendor/bundle
ENV PLAT=$PLAT
ENV RUBY_VERSION=$RUBY_VERSION
ENV PATH="/usr/local/bin:$PATH"

WORKDIR $APP_PATH

# Keep local RPMs available in the build context (not installed on UBI 10)
COPY rpms/ /tmp/rpms/

# Install build tools and runtime libs in builder
RUN microdnf -y update && microdnf -y install \
  git gcc-c++ make which tar bzip2 unzip curl gnupg2 m4 \
  openssl openssl-devel \
  zlib zlib-devel \
  libyaml libyaml-devel \
  libffi libffi-devel \
  ncurses ncurses-devel \
  findutils diffutils procps-ng \
  ca-certificates \
  libpq libpq-devel \
  krb5-libs \
  openldap \
  cyrus-sasl-lib \
  && microdnf clean all

# Install local RPMs shipped in repo (EL10 builds)
RUN if ls /tmp/rpms/*.rpm >/dev/null 2>&1; then rpm -Uvh --nosignature /tmp/rpms/*.rpm; fi

# Build and install Ruby from source (no RVM)
RUN set -eux; \
  curl -fsSL https://cache.ruby-lang.org/pub/ruby/${RUBY_VERSION%.*}/ruby-${RUBY_VERSION}.tar.gz -o /tmp/ruby.tar.gz; \
  mkdir -p /tmp/ruby-src; tar -xzf /tmp/ruby.tar.gz -C /tmp/ruby-src --strip-components=1; \
  cd /tmp/ruby-src; \
  ./configure --disable-install-doc --with-openssl-dir=/usr; \
  make -j"$(nproc)" && make install; \
  rm -rf /tmp/ruby-src /tmp/ruby.tar.gz; \
  gem update --system || true

############################################################################    
# BEGINNING OF Navy specifics (handled in builder)
############################################################################

# Add DoD certs directory from build context (optional) and install if present
ADD certs/ /certs/
RUN if [ -f /certs/unclass-certificates_pkcs7_DoD.zip ]; then \
  set -euxo pipefail; \
  cd /certs; \
  unzip unclass-certificates_pkcs7_DoD.zip; \
  cp /certs/certificates_pkcs7_v5_13_dod/* /etc/pki/ca-trust/source/anchors/; \
  cd /etc/pki/ca-trust/source/anchors/; \
  openssl pkcs7 -inform der -in certificates_pkcs7_v5_13_dod_der.p7b -print_certs -out certificates_pkcs7_v5_13_dod_der.pem; \
  openssl pkcs7 -inform der -in certificates_pkcs7_v5_13_dod_DoD_Root_CA_3_der.p7b -print_certs -out certificates_pkcs7_v5_13_dod_DoD_Root_CA_3_der.pem; \
  openssl pkcs7 -inform der -in certificates_pkcs7_v5_13_dod_DoD_Root_CA_4_der.p7b -print_certs -out certificates_pkcs7_v5_13_dod_DoD_Root_CA_4_der.pem; \
  openssl pkcs7 -inform der -in certificates_pkcs7_v5_13_dod_DoD_Root_CA_5_der.p7b -print_certs -out certificates_pkcs7_v5_13_dod_DoD_Root_CA_5_der.pem; \
  openssl pkcs7 -inform der -in certificates_pkcs7_v5_13_dod_DoD_Root_CA_6_der.p7b -print_certs -out certificates_pkcs7_v5_13_dod_DoD_Root_CA_6_der.pem; \
  mv certificates_pkcs7_v5_13_dod_der.pem certificates_pkcs7_v5_13_dod_der.crt; \
  mv certificates_pkcs7_v5_13_dod_DoD_Root_CA_3_der.pem certificates_pkcs7_v5_13_dod_DoD_Root_CA_3_der.crt; \
  mv certificates_pkcs7_v5_13_dod_DoD_Root_CA_4_der.pem certificates_pkcs7_v5_13_dod_DoD_Root_CA_4_der.crt; \
  mv certificates_pkcs7_v5_13_dod_DoD_Root_CA_5_der.pem certificates_pkcs7_v5_13_dod_DoD_Root_CA_5_der.crt; \
  mv certificates_pkcs7_v5_13_dod_DoD_Root_CA_6_der.pem certificates_pkcs7_v5_13_dod_DoD_Root_CA_6_der.crt; \
  mv dod_pke_chain.pem dod_pke_chain.crt; \
  rm -f ./certificates_pkcs7_v5_13_dod*.p7b; \
  update-ca-trust extract; \
  else \
  echo "Skipping DoD cert installation: /certs/unclass-certificates_pkcs7_DoD.zip not found in build context"; \
  fi

############################################################################    
# END OF Navy specifics
############################################################################

COPY Gemfile Gemfile.lock .ruby-version $APP_PATH
RUN gem install bundler && \
  bundle config set deployment true && \
  DOCKER_ENV=true RACK_ENV=production bundle install

# Copy application sources
COPY app/       $APP_PATH/app
COPY bin/       $APP_PATH/bin
COPY config/    $APP_PATH/config
COPY db/        $APP_PATH/db
COPY fixtures/  $APP_PATH/fixtures
COPY lib/       $APP_PATH/lib
COPY log/       $APP_PATH/log
COPY public/    $APP_PATH/public
COPY config.ru  $APP_PATH
COPY Rakefile   $APP_PATH

COPY docker-entrypoint.sh /tmp/docker-entrypoint.sh

# Collect runtime artifacts to a staging dir
RUN mkdir -p /runtime/usr/local /runtime/etc /runtime/usr/bin /runtime/usr/lib64 && \
  # Ruby runtime from /usr/local
  mkdir -p /runtime/usr/local/bin /runtime/usr/local/lib && \
  cp -a /usr/local/bin/ruby /runtime/usr/local/bin/ && \
  cp -a /usr/local/bin/gem /usr/local/bin/rake /usr/local/bin/bundle /usr/local/bin/bundler /runtime/usr/local/bin/ 2>/dev/null || true && \
  cp -a /usr/local/lib/ruby /runtime/usr/local/lib/ && \
  cp -a /etc/pki /runtime/etc/ && \
  cp -a /etc/ssl /runtime/etc/ || true && \
  mkdir -p /runtime/etc/crypto-policies/back-ends && \
  if [ -f /etc/crypto-policies/back-ends/opensslcnf.config ]; then \
    cp -a /etc/crypto-policies/back-ends/opensslcnf.config /runtime/etc/crypto-policies/back-ends/; \
  elif [ -f /usr/share/crypto-policies/back-ends/opensslcnf.config ]; then \
    cp -a /usr/share/crypto-policies/back-ends/opensslcnf.config /runtime/etc/crypto-policies/back-ends/; \
  fi && \
  cp -a /usr/bin/openssl /runtime/usr/bin/ && \
  mkdir -p /runtime/usr/lib64/ossl-modules && \
  cp -a /usr/lib64/ossl-modules/* /runtime/usr/lib64/ossl-modules/ 2>/dev/null || true

# Provide a minimal OpenSSL config that doesn't rely on system crypto policies
COPY openssl.cnf /runtime/etc/ssl/openssl.cnf
COPY openssl.cnf /runtime/etc/pki/tls/openssl.cnf
RUN set -eux; \
  # Copy commonly required runtime shared libraries
  for lib in \
    /usr/lib64/libpq.so.* \
    /usr/lib64/libssl.so.* \
    /usr/lib64/libcrypto.so.* \
    /usr/lib64/libcrypt.so.* \
    /lib64/libcrypt.so.* \
    /usr/lib64/libgssapi_krb5.so.* \
    /usr/lib64/libkrb5.so.* \
    /usr/lib64/libk5crypto.so.* \
    /usr/lib64/libcom_err.so.* \
    /usr/lib64/libldap.so.* \
    /usr/lib64/liblber.so.* \
    /usr/lib64/libsasl2.so.* \
    /usr/lib64/libyaml-0.so.* \
      /usr/lib64/libreadline.so.* \
      /usr/lib64/libncursesw.so.* \
      /usr/lib64/libz.so.* \
      /usr/lib64/libzstd.so.* \
      /usr/lib64/libgmp.so.* \
      /usr/lib64/libffi.so.* \
      /usr/lib64/libgdbm.so.* \
    ; do cp -a $lib /runtime/usr/lib64/ 2>/dev/null || true; done; \
  # App
  cp -a $APP_PATH /runtime/app; \
  chmod +x /tmp/docker-entrypoint.sh; cp /tmp/docker-entrypoint.sh /runtime/usr/bin/docker-entrypoint.sh

#############################
# Runtime stage (UBI 10 micro)
#############################
FROM registry.access.redhat.com/ubi10/ubi-micro

ENV APP_PATH=/app/
ARG RUBY_VERSION=3.4.3
ENV PATH="/usr/local/bin:$PATH"
ENV LD_LIBRARY_PATH="/usr/lib64:/lib64:/usr/local/lib"
ENV OPENSSL_MODULES="/usr/lib64/ossl-modules"
ENV OPENSSL_CONF="/etc/pki/tls/openssl.cnf"

WORKDIR $APP_PATH

# Copy runtime files from builder
COPY --from=builder /runtime/ /

# Create runtime user (ubi-micro lacks useradd)
RUN set -eux; \
  uid=10001; gid=10001; \
  mkdir -p /home/registry; \
  echo "registry:x:${uid}:${gid}:Registry User:/home/registry:/bin/sh" >> /etc/passwd; \
  echo "registry:x:${gid}:" >> /etc/group; \
  chown -R ${uid}:${gid} /app /home/registry
USER 10001

ENTRYPOINT ["/usr/bin/docker-entrypoint.sh"]

EXPOSE 9292
