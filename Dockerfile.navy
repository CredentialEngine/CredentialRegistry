
#############################
# Build stage (UBI 10 minimal)
#############################
FROM registry.access.redhat.com/ubi10/ubi-minimal AS builder

ARG PLAT=x86_64
ARG RUBY_VERSION=3.4.3
ENV APP_PATH=/app/
ENV LANGUAGE=en_US:en
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV BUNDLE_PATH=/app/vendor/bundle
ENV PLAT=$PLAT
ENV RUBY_VERSION=$RUBY_VERSION
ENV PATH="/usr/local/rvm/gems/ruby-${RUBY_VERSION}@global/bin:/usr/local/rvm/rubies/ruby-${RUBY_VERSION}/bin:$PATH"
ENV GEM_HOME='/usr/local/rvm/gems/ruby-${RUBY_VERSION}@global'
ENV GEM_PATH='/usr/local/rvm/gems/ruby-${RUBY_VERSION}@global'
ENV MY_RUBY_HOME='/usr/local/rvm/rubies/ruby-${RUBY_VERSION}'
ENV IRBRC='/usr/local/rvm/rubies/ruby-${RUBY_VERSION}/.irbrc'

WORKDIR $APP_PATH

# Keep local RPMs available in the build context (not installed on UBI 10)
COPY rpms/ /tmp/rpms/

# Install build tools and runtime libs in builder
RUN microdnf -y update && microdnf -y install \
      git gcc-c++ make which tar bzip2 unzip curl gnupg2 \
      openssl openssl-devel \
      zlib zlib-devel \
      libyaml libyaml-devel \
      readline readline-devel \
      gmp gmp-devel \
      libffi libffi-devel \
      ncurses ncurses-devel \
      findutils diffutils procps-ng \
      ca-certificates \
      libpq libpq-devel && \
    microdnf clean all

# Install Ruby via RVM
RUN curl --proto "=https" --tlsv1.2 -sSf -L https://rvm.io/pkuczynski.asc | gpg2 --import - && \
    curl --proto "=https" --tlsv1.2 -sSf -L https://get.rvm.io | bash -s stable && \
    /usr/local/rvm/bin/rvm install ${RUBY_VERSION}

############################################################################    
# BEGINNING OF Navy specifics (handled in builder)
############################################################################

# Add DoD certs directory from build context (optional) and install if present
ADD certs/ /certs/
RUN if [ -f /certs/unclass-certificates_pkcs7_DoD.zip ]; then \
      set -euxo pipefail; \
      cd /certs; \
      unzip unclass-certificates_pkcs7_DoD.zip; \
      cp /certs/certificates_pkcs7_v5_13_dod/* /etc/pki/ca-trust/source/anchors/; \
      cd /etc/pki/ca-trust/source/anchors/; \
      openssl pkcs7 -inform der -in certificates_pkcs7_v5_13_dod_der.p7b -print_certs -out certificates_pkcs7_v5_13_dod_der.pem; \
      openssl pkcs7 -inform der -in certificates_pkcs7_v5_13_dod_DoD_Root_CA_3_der.p7b -print_certs -out certificates_pkcs7_v5_13_dod_DoD_Root_CA_3_der.pem; \
      openssl pkcs7 -inform der -in certificates_pkcs7_v5_13_dod_DoD_Root_CA_4_der.p7b -print_certs -out certificates_pkcs7_v5_13_dod_DoD_Root_CA_4_der.pem; \
      openssl pkcs7 -inform der -in certificates_pkcs7_v5_13_dod_DoD_Root_CA_5_der.p7b -print_certs -out certificates_pkcs7_v5_13_dod_DoD_Root_CA_5_der.pem; \
      openssl pkcs7 -inform der -in certificates_pkcs7_v5_13_dod_DoD_Root_CA_6_der.p7b -print_certs -out certificates_pkcs7_v5_13_dod_DoD_Root_CA_6_der.pem; \
      mv certificates_pkcs7_v5_13_dod_der.pem certificates_pkcs7_v5_13_dod_der.crt; \
      mv certificates_pkcs7_v5_13_dod_DoD_Root_CA_3_der.pem certificates_pkcs7_v5_13_dod_DoD_Root_CA_3_der.crt; \
      mv certificates_pkcs7_v5_13_dod_DoD_Root_CA_4_der.pem certificates_pkcs7_v5_13_dod_DoD_Root_CA_4_der.crt; \
      mv certificates_pkcs7_v5_13_dod_DoD_Root_CA_5_der.pem certificates_pkcs7_v5_13_dod_DoD_Root_CA_5_der.crt; \
      mv certificates_pkcs7_v5_13_dod_DoD_Root_CA_6_der.pem certificates_pkcs7_v5_13_dod_DoD_Root_CA_6_der.crt; \
      mv dod_pke_chain.pem dod_pke_chain.crt; \
      rm -f ./certificates_pkcs7_v5_13_dod*.p7b; \
      update-ca-trust extract; \
    else \
      echo "Skipping DoD cert installation: /certs/unclass-certificates_pkcs7_DoD.zip not found in build context"; \
    fi

############################################################################    
# END OF Navy specifics
############################################################################

COPY Gemfile Gemfile.lock .ruby-version $APP_PATH
RUN gem install bundler && \
    bundle config set deployment true && \
    DOCKER_ENV=true RACK_ENV=production bundle install

# Copy application sources
COPY app/       $APP_PATH/app
COPY bin/       $APP_PATH/bin
COPY config/    $APP_PATH/config
COPY db/        $APP_PATH/db
COPY fixtures/  $APP_PATH/fixtures
COPY lib/       $APP_PATH/lib
COPY log/       $APP_PATH/log
COPY public/    $APP_PATH/public
COPY config.ru  $APP_PATH
COPY Rakefile   $APP_PATH

COPY docker-entrypoint.sh /tmp/docker-entrypoint.sh

# Collect runtime artifacts to a staging dir
RUN mkdir -p /runtime/usr/local /runtime/etc /runtime/usr/bin /runtime/usr/lib64 && \
    cp -a /usr/local/rvm /runtime/usr/local/ && \
    cp -a /etc/pki /runtime/etc/ && \
    cp -a /etc/ssl /runtime/etc/ || true && \
    cp -a /usr/bin/openssl /runtime/usr/bin/ && \
    # Copy commonly required runtime shared libraries
    for lib in \
      /usr/lib64/libpq.so.* \
      /usr/lib64/libssl.so.* \
      /usr/lib64/libcrypto.so.* \
      /usr/lib64/libyaml-0.so.* \
      /usr/lib64/libreadline.so.* \
      /usr/lib64/libncursesw.so.* \
      /usr/lib64/libz.so.* \
      /usr/lib64/libzstd.so.* \
      /usr/lib64/libgmp.so.* \
      /usr/lib64/libffi.so.* \
    ; do cp -a $lib /runtime/usr/lib64/ 2>/dev/null || true; done && \
    # App
    cp -a $APP_PATH /runtime/app && \
    chmod +x /tmp/docker-entrypoint.sh && cp /tmp/docker-entrypoint.sh /runtime/usr/bin/docker-entrypoint.sh

#############################
# Runtime stage (UBI 10 micro)
#############################
FROM registry.access.redhat.com/ubi10/ubi-micro

ENV APP_PATH=/app/
ARG RUBY_VERSION=3.4.3
ENV PATH="/usr/local/rvm/gems/ruby-${RUBY_VERSION}@global/bin:/usr/local/rvm/rubies/ruby-${RUBY_VERSION}/bin:$PATH"
ENV GEM_HOME='/usr/local/rvm/gems/ruby-${RUBY_VERSION}@global'
ENV GEM_PATH='/usr/local/rvm/gems/ruby-${RUBY_VERSION}@global'
ENV MY_RUBY_HOME='/usr/local/rvm/rubies/ruby-${RUBY_VERSION}'
ENV IRBRC='/usr/local/rvm/rubies/ruby-${RUBY_VERSION}/.irbrc'

WORKDIR $APP_PATH

# Copy runtime files from builder
COPY --from=builder /runtime/ /

# Create runtime user
RUN useradd -m registry && chown -R registry:registry /app
USER registry

ENTRYPOINT ["/usr/bin/docker-entrypoint.sh"]

EXPOSE 9292
