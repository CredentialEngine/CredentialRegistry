#!/usr/bin/env ruby

# helper script to update CE/Registry's JSON schemas

require 'active_support/core_ext/object/blank'
require 'jwt'
require 'json-schema'
require 'optparse'
require 'optparse/uri'

DEFAULT_DIR_NAME = 'Production_Schema'.freeze

options = {
  dir_name: DEFAULT_DIR_NAME,
  host: nil,
  private_key: nil,
  public_key: nil
}

parser = OptionParser.new do |opts|
  opts.banner = 'Usage: update_json_schemas [options]'

  opts.on(
    '-d',
    '--dir-name=DIR_NAME',
    "schema directory name (default: #{DEFAULT_DIR_NAME})"
  ) do |dir|
    options[:dir_name] = dir
  end

  opts.on('-h', '--host=HOST', URI, 'target host') do |host|
    options[:host] = host
  end

  opts.on('--private-key=PATH', 'private key') do |private_key|
    options[:private_key] = private_key
  end

  opts.on('--public-key==PATH', 'public key') do |public_key|
    options[:public_key] = public_key
  end
end

parser.parse!

if options.values.any?(&:blank?)
  puts parser
  exit
end

URL = "#{options[:host]}/schemas/ce_registry".freeze

priv_key = OpenSSL::PKey::RSA.new(File.read(options[:private_key]))

schemas = {
  'organization' => "https://raw.githubusercontent.com/CredentialEngine/CTDL_Json_Validation_Schema/master/#{options[:dir_name]}/agentSchema.json",
  'credential' => "https://raw.githubusercontent.com/CredentialEngine/CTDL_Json_Validation_Schema/master/#{options[:dir_name]}/credentialSchema.json",
  'assessment_profile' => "https://raw.githubusercontent.com/CredentialEngine/CTDL_Json_Validation_Schema/master/#{options[:dir_name]}/assessmentProfileSchema.json",
  'learning_opportunity_profile' => "https://raw.githubusercontent.com/CredentialEngine/CTDL_Json_Validation_Schema/master/#{options[:dir_name]}/learningOpportunityProfileSchema.json",
  'cost_manifest_schema' => "https://raw.githubusercontent.com/CredentialEngine/CTDL_Json_Validation_Schema/master/#{options[:dir_name]}/costManifestSchema.json",
  'condition_manifest_schema' => "https://raw.githubusercontent.com/CredentialEngine/CTDL_Json_Validation_Schema/master/#{options[:dir_name]}/conditionManifestSchema.json"
}

draft_schema = JSON::Validator.validator_for_name('http://json-schema.org/draft-04/schema#').metaschema

schemas.each do |target, url|
  fname = "./tmp/envelope_#{target}.json".freeze
  print "#{target} => #{fname} => "

  schema = JSON.parse(`curl -s #{url}`)
  begin
    JSON::Validator.validate!(draft_schema, schema)
  rescue JSON::Schema::ValidationError => e
    puts "JSON Schema invalid: #{e.message}"
    next
  end

  resource = {
    'name' => "ce_registry/#{target}",
    'schema' => schema
  }

  envelope = {
    "envelope_type": 'json_schema',
    "envelope_version": '1.0.0',
    "envelope_community": 'ce_registry',
    "resource": JWT.encode(resource, priv_key, 'RS256'),
    "resource_format": 'json',
    "resource_encoding": 'jwt',
    "resource_public_key": File.read(options[:public_key])
  }

  File.write fname, envelope.to_json

  puts `curl -s -XPUT #{URL}/#{target} -d @#{fname} -H "Content-Type: application/json"`
end
